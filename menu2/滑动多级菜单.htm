<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" >
    <head>
        <title>
            
        </title>
        <meta http-equiv="Content-Type" content="text/html; charset=gb2312" />
        <script type="text/javascript" src="prototype-1.6.0.2.js"></script>
        <script type="text/javascript">
var MenuItem = Class.create({
	initialize:function(element,name){
		this.element = $(element);//li node
		this.items = null;
		this.closeTimeoutId = null;
		this.menu = null;
		this.childMenu = null;
		this.depth = 0;
		this.parent = null;
		this.fadeIntervalId = null;
		this.isClosed = true;
		this.name = name;
	},
	addItem:function(menuItem){
		if(!this.items)
			this.items = [];
		menuItem.parent = this;
		menuItem.depth = this.depth + 1;
		menuItem.menu = this.menu;
		this.items.push(menuItem);
	},
	isParentOf:function(childItem){//判断当前item是不是childItem的parent
		var temp = childItem;
		while(temp.parent){
			if(temp.parent == this)
				return true;
			temp = temp.parent;
		}
		return false;
	},
	topItem:function(){
		var temp = this;
		while(temp){
			if(temp.depth == 0)
				return temp;
			temp = temp.parent;
		}
		return temp;
	},
	render:function(){
		var self = this;
		
		//鼠标移入MenuItem
		function elementMouseOver(e){
			if(self.parent && self.parent.isClosed)return;
			
			//当在li里面移动的时候 不用响应
			var target = e.element();
			var relatedTarget = e.relatedTarget || e.fromElement;
			if(!relatedTarget)return;
			if($(relatedTarget).descendantOf(self.element) || $(relatedTarget) == self.element)
				return;
			
			//关闭所有兄弟菜单
			var items = self.parent?self.parent.items:self.menu.rootItems;//获得所有兄弟菜单
			items.each(function(item){
				if(self != item)//如果不是当前鼠标移入的菜单 则关闭菜单及其子菜单
					item.closeAll();//可能会重复调用
			});
			
			if(self.childMenuContainer){
				//设置子菜单的位置
				if(self.depth == 0){
					self.childMenuContainer.setStyle({
						"top":self.element.cumulativeOffset().top + self.element.getHeight() + "px",
						"left":self.element.cumulativeOffset().left + "px"
					});
				}else{
					self.childMenuContainer.setStyle({
						"top":self.element.cumulativeOffset().top + "px",
						"left":self.element.cumulativeOffset().left + self.element.getWidth() + "px"
					});
				}
			}
			
			//打开当前的子菜单以及所有父菜单的子菜单
			var temp = self;
			while(temp){
				temp.open();//可能会重复调用
				temp = temp.parent;
			}
			self.menu.currentItem = self;
		}
		this.element.observe("mouseover",elementMouseOver.bindAsEventListener());
		
		//鼠标移出MenuItem
		function elementMouseOut(e){
			if(self.parent && self.parent.isClosed)return;
			//当在li里面移动的时候 不用响应
			var target = e.element();
			var relatedTarget = e.relatedTarget || e.toElement;
			if(!relatedTarget)return;
			if($(relatedTarget).descendantOf(self.element) || $(relatedTarget) == self.element)
				return;
			
			//关闭当前的子菜单
			self.timeoutClose();
		}
		this.element.observe("mouseout",elementMouseOut.bindAsEventListener());
		
		
		//构建childMenu
		if(!this.items || this.items.length <= 0)return;
		this.childMenu = $(document.createElement("ul"));
		if(this.menu.childMenuClassName)
			this.childMenu.addClassName(this.menu.childMenuClassName);

		//鼠标移入childMenu
		function childMenuMouseOver(e){
			if(self.isClosed)return;
			
			var target = e.element();
			var relatedTarget = e.relatedTarget || e.fromElement;
			if(!relatedTarget)return;
			if(!$(relatedTarget).descendantOf(self.childMenu) && $(relatedTarget) != self.childMenu){
				
				var temp = self;
				while(temp){
					temp.clearCloseTimeout();
					temp = temp.parent;
				}
			}
		}
		this.childMenu.observe("mouseover",childMenuMouseOver.bindAsEventListener());
		
		//鼠标移出childMenu
		function childMenuMouseOut(e){
			if(self.isClosed)return;
			
			var target = e.element();
			var relatedTarget = e.relatedTarget || e.toElement;
			if(!relatedTarget)return;
			if(!$(relatedTarget).descendantOf(self.childMenu) && $(relatedTarget) != self.childMenu){
				//关闭所有的菜单
				var temp = self;
				while(temp){
					temp.timeoutClose();
					temp = temp.parent;
				}
			}
		}
		this.childMenu.observe("mouseout",childMenuMouseOut.bindAsEventListener());
		
		//递归childMenu中的MenuItem
		$A(this.items).each(function(item,index){
			var li = $(document.createElement("li"));
			li.appendChild(item.element);
			item.element = li;
			self.childMenu.appendChild(li);
			item.render();
		});
		
		document.body.appendChild(this.childMenu);
		this.childMenu.setStyle({
			"position":"absolute",
			"display":"block",
			"visibility":"hidden",//不可见但是有高度和宽度
			"top":"0px",
			"left":"0px",
			"margin":"0px"
		});
		this.childMenuContainer = $(document.createElement("div"));
		this.childMenuContainer.setStyle({
			"position":"absolute",
			"display":"block",
			"overflow":"hidden",
			"visibility":"hidden",
			"left":"0px",
			"top":"0px",
			"width":this.childMenu.getWidth() + "px",
			"height":this.childMenu.getHeight() + "px"
		});
		
		if(this.depth == 0){
			this.childMenu.setStyle({
				"top":"-" + this.childMenu.getHeight() + "px"
			});
		}else{
			this.childMenu.setStyle({
				"left":"-" + this.childMenu.getWidth() + "px"
			});
		}
		
		this.childMenuContainer.setStyle({
			"display":"none",
			"visibility":"visible"
		});
		this.childMenu.setStyle({
			"visibility":"visible"
		});
		this.childMenuContainer.appendChild(this.childMenu);
		document.body.appendChild(this.childMenuContainer);
	},
	open:function(){//立即打开当前菜单
		this.clearCloseTimeout();
		if(!this.isClosed)return;//保证不重复打开
		this.menu.liFocus(this);
		if(this.childMenu){
			clearInterval(this.slideInIntervalId);
			clearInterval(this.slideOutIntervalId);
			this.childMenuContainer.show();
			var self = this;
			var start = 0;
			if(this.depth == 0)
				start = parseInt(this.childMenu.getStyle("top"));
			else
				start = parseInt(this.childMenu.getStyle("left"));
			
			var end = 0;
			function slideIn(){
				var step = Math.round((end - start)/5);
				start += step;
				if(start >= end || step == 0)
					start = end;
				if(self.depth == 0)
					self.childMenu.setStyle({
						"top":start + "px"
					});
				else
					self.childMenu.setStyle({
						"left":start + "px"
					});
				if(start == end){
					clearInterval(self.slideInIntervalId);
					self.isClosed = false;
				}
			}
			this.slideInIntervalId = setInterval(slideIn,15);
			writeLog(this.name + " childMenu show");
		}
		this.isClosed = false;
	},
	close:function(){//立即关闭当前菜单
		this.clearCloseTimeout();
		if(this.isClosed)return;//保证不重复关闭
		this.menu.liBlur(this);
		if(this.childMenu){
			clearInterval(this.slideInIntervalId);
			clearInterval(this.slideOutIntervalId);
			var self = this;
			var start = 0;
			if(this.depth == 0)
				start = parseInt(this.childMenu.getStyle("top"));
			else
				start = parseInt(this.childMenu.getStyle("left"));
				
			var end = 0;
			if(this.depth == 0)
				end = -this.childMenu.getHeight();
			else
				end = -this.childMenu.getWidth();
			
			function slideOut(){
				var step = Math.round((start - end)/5);
				start -= step;
				if(start <= end || step == 0)
					start = end;
				
				if(self.depth == 0)
					self.childMenu.setStyle({
						"top":start + "px"
					});
				else
					self.childMenu.setStyle({
						"left":start + "px"
					});
				if(start == end){
					clearInterval(self.slideOutIntervalId);
					//self.isClosed = false;
					self.childMenuContainer.hide();
				}
			}
			this.slideOutIntervalId = setInterval(slideOut,30);
			writeLog(this.name + " childMenu hide");
		}
		this.isClosed = true;
	},
	closeAll:function(){//立即关闭当前菜单及子菜单
		this.close();
		if(!this.items)return;
		this.items.each(function(item){
			item.closeAll();
		});
	},
	clearCloseTimeout:function(){
		clearTimeout(this.closeTimeoutId);
		this.closeTimeoutId = null;
	},
	timeoutClose:function(){
		var self = this;
		this.clearCloseTimeout();
		this.closeTimeoutId = setTimeout(close,1000);//这里不能直接用this.close或者self.close
		function close(){
			self.close();
		}
	}
});

var Menu = Class.create({
	initialize:function(childMenuClassName,liFocus,liBlur){
		this.rootItems = [];
		this.currentItem = null;//当前展开的MenuItem
		this.childMenuClassName = childMenuClassName;
		this.liFocus = liFocus;//表示当前菜单路径需要的
		this.liBlur = liBlur;
	},
	addItem:function(rootItem){
		rootItem.depth = 0;
		rootItem.parent = null;
		rootItem.menu = this;
		this.rootItems.push(rootItem);
	},
	render:function(){
		this.rootItems.each(function(item,index){
			item.render();
		});
	}
});

function winLoad(){
	function createItemElement(text){
		var a = document.createElement("a");
		a.href = "javascript:void(0);";
		var textNode = document.createTextNode(text);
		a.appendChild(textNode);
		return a;
	}
	function liFocus(li){
		if(li.depth == 0){
			$(li.element).setStyle({
				"background":"#B70100"
			});
		}else{
			$(li.element).setStyle({
				"background":"#940000"
			});
		}
	}
	function liBlur(li){
		$(li.element).setStyle({
			"background":"none"
		});
	}
	var menu = new Menu("childMenu",liFocus,liBlur);
	//item1
	var item1 = new MenuItem($("item1"),"item 1");
	menu.addItem(item1);
		var item11 = new MenuItem(createItemElement("item 1-1"),"item 1-1");
		item1.addItem(item11);
		var item12 = new MenuItem(createItemElement("item 1-2"),"item 1-2");
		item1.addItem(item12);
		var img = new Image();
		var a = document.createElement("a");
		a.innerHTML = "item 1-3<br/><img src='botton_gif_080.gif' alt=''/>";
		var item13 = new MenuItem(a,"item 1-3");
		item1.addItem(item13);
			var item131 = new MenuItem(createItemElement("item 1-3-1"),"item 1-3-1");
			item13.addItem(item131);
				var item1311 = new MenuItem(createItemElement("item 1-3-1-1"),"item 1-3-1-1");
				item131.addItem(item1311);
			var item132 = new MenuItem(createItemElement("item 1-3-2"),"item 1-3-2");
			item13.addItem(item132);
		var item14 = new MenuItem(createItemElement("item 1-4"),"item 1-4");
		item1.addItem(item14);
			var item141 = new MenuItem(createItemElement("item 1-4-1"),"item 1-4-1");
			item14.addItem(item141);
				var item1411 = new MenuItem(createItemElement("item 1-4-1-1"),"item 1-4-1-1");
				item141.addItem(item1411);
			var item142 = new MenuItem(createItemElement("item 1-4-2"),"item 1-4-2");
			item14.addItem(item142);
	//item2
	var item2 = new MenuItem($("item2"));
	menu.addItem(item2);
	var item21 = new MenuItem(createItemElement("item 2-1"));
	item2.addItem(item21);
	var item22 = new MenuItem(createItemElement("item 2-2"));
	item2.addItem(item22);
	var item23 = new MenuItem(createItemElement("item 2-3"));
	item2.addItem(item23);
	var item3 = new MenuItem($("item3"));
	menu.addItem(item3);
	var item4 = new MenuItem($("item4"));
	menu.addItem(item4);
	var item5 = new MenuItem($("item5"));
	menu.addItem(item5);
	var item6 = new MenuItem($("item6"));
	menu.addItem(item6);
	
	menu.render();
}

if(window.attachEvent){
	window.attachEvent("onload",winLoad);
}else if(window.addEventListener){
	window.addEventListener("load",winLoad,false);
}else{
	window.onload = winLoad;
}

function writeLog(log){
	//$("log").innerHTML = log + "<br/>" + $("log").innerHTML;
}
		</script>
        <style type="text/css">
body{font-size:14px;font-family:Arial;font-weight:bold;}
ul,ul li{padding:0px;margin:0px;list-style:none;}
a{text-decoration:none;font-size:14px;}
a img{border:none;}


#container{width:960px;margin:0px auto;height:500px;}


#menu{height:36px;background:#940000;}
#menu li{margin:0px;float:left;cursor:pointer;}
#menu li a{display:block;padding:10px 20px;color:white;}


.childMenu{background:#B70100;border:solid 2px #6A321B;}
.childMenu li{margin:5px;padding:5px;}
.childMenu li a{display:block;padding:5px 15px;color:white;text-align:center;}
        </style>
    </head>
    <body>
<div id="container">
	<ul id="menu">
		<li><a id="item1" href="javascript:void(0);">Menu1</a></li>
		<li><a id="item2" href="javascript:void(0);">Menu2</a></li>
		<li><a id="item3" href="javascript:void(0);">Menu3</a></li>
		<li><a id="item4" href="javascript:void(0);">Menu4</a></li>
		<li id="item5"><a href="javascript:void(0);">Menu5</a></li>
		<li id="item6"><a href="javascript:void(0);">Menu6</a></li>
	</ul>
</div>

        <div id="log" style="position:absolute;right:0px;top:0px;width:600px;">
			
        </div>
    </body>
</html>